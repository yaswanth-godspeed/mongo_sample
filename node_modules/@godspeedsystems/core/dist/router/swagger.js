"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "generateSwaggerJSON", {
    enumerable: true,
    get: function() {
        return generateSwaggerJSON;
    }
});
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
const generateSwaggerJSON = (events, definitions, eventSourceConfig)=>{
    const finalSpecs = {
        openapi: "3.0.0",
        paths: {}
    };
    const { port, docs: { info, servers }, jwt } = eventSourceConfig;
    Object.keys(events).forEach((event)=>{
        let apiEndPoint = event.split('.')[2];
        apiEndPoint = apiEndPoint.replace(/:([^\/]+)/g, '{$1}'); //We take :path_param. OAS3 takes {path_param}
        const method = event.split('.')[1];
        const eventSchema = events[event];
        //Initialize the schema for this method, for given event
        let methodSpec = _object_spread({
            summary: eventSchema.summary,
            description: eventSchema.description,
            requestBody: eventSchema.body,
            parameters: eventSchema.params,
            responses: eventSchema.responses
        }, eventSchema.authn && {
            security: [
                {
                    bearerAuth: []
                }
            ]
        });
        //Set it in the overall schema
        // @ts-ignore
        finalSpecs.paths[apiEndPoint] = _object_spread_props(_object_spread({}, finalSpecs.paths[apiEndPoint]), {
            [method]: methodSpec
        });
    });
    if (servers && Array.isArray(servers)) {
        finalSpecs.servers = servers;
    } else {
        finalSpecs.servers = [
            {
                "url": `http://localhost:${port}`
            }
        ];
    }
    finalSpecs.info = info;
    finalSpecs.definitions = definitions;
    if (jwt) {
        finalSpecs.components = {
            securitySchemes: {
                bearerAuth: {
                    type: 'http',
                    scheme: 'bearer',
                    bearerFormat: 'JWT'
                }
            }
        };
    }
    return finalSpecs;
};
