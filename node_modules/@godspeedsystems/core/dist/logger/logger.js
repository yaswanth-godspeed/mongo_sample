/*
* You are allowed to study this software for learning and local * development purposes only. Any other use without explicit permission by Mindgrep, is prohibited.
* Â© 2022 Mindgrep Technologies Pvt Ltd
*/ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "logger", {
    enumerable: true,
    get: function() {
        return logger;
    }
});
const _pino = /*#__PURE__*/ _interop_require_default(require("pino"));
const _config = /*#__PURE__*/ _interop_require_default(require("config"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const configRedact = _config.default.redact || [];
let redactAttrs = [];
for (const redactAttr of configRedact){
    if (redactAttr.match(/^\*\*/)) {
        const fieldName = redactAttr.replace(/^\*\*\./, '');
        redactAttrs.push(`${fieldName}`, `*.${fieldName}`, `*.*.${fieldName}`, `*.*.*.${fieldName}`, `*.*.*.*.${fieldName}`, `*.*.*.*.*.${fieldName}`, `*.*.*.*.*.*.${fieldName}`, `*.*.*.*.*.*.*.${fieldName}`, `*.*.*.*.*.*.*.*.${fieldName}`, `*.*.*.*.*.*.*.*.*.${fieldName}`);
    } else {
        redactAttrs.push(redactAttr);
    }
}
let logTarget;
if (process.env.OTEL_ENABLED == 'true' && process.env.NODE_ENV != 'dev') {
    logTarget = "../pino/pino-opentelemetry-transport.js";
} else {
    logTarget = "pino-pretty";
}
const logger = (0, _pino.default)({
    level: _config.default.log_level || 'info',
    transport: {
        target: logTarget,
        options: {
            destination: 1,
            Resource: {
                'service.name': process.env.OTEL_SERVICE_NAME || 'unknown_service:node',
                env: process.env.NODE_ENV
            }
        }
    },
    redact: {
        paths: redactAttrs,
        censor: '*****'
    }
});
