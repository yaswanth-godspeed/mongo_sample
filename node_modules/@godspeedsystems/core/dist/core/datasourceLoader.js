"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, // we need to scan only the first level of datasources folder
"default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
const _glob = require("glob");
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
const _logger = require("../logger");
const _expandVariables = /*#__PURE__*/ _interop_require_default(require("./expandVariables"));
const _yamlLoader = /*#__PURE__*/ _interop_require_default(require("./yamlLoader"));
function _async_iterator(iterable) {
    var method, async, sync, retry = 2;
    for("undefined" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;){
        if (async && null != (method = iterable[async])) return method.call(iterable);
        if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable));
        async = "@@asyncIterator", sync = "@@iterator";
    }
    throw new TypeError("Object is not async iterable");
}
function AsyncFromSyncIterator(s) {
    function AsyncFromSyncIteratorContinuation(r) {
        if (Object(r) !== r) return Promise.reject(new TypeError(r + " is not an object."));
        var done = r.done;
        return Promise.resolve(r.value).then(function(value) {
            return {
                value: value,
                done: done
            };
        });
    }
    return AsyncFromSyncIterator = function(s) {
        this.s = s, this.n = s.next;
    }, AsyncFromSyncIterator.prototype = {
        s: null,
        n: null,
        next: function() {
            return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments));
        },
        return: function(value) {
            var ret = this.s.return;
            return void 0 === ret ? Promise.resolve({
                value: value,
                done: !0
            }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments));
        },
        throw: function(value) {
            var thr = this.s.return;
            return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments));
        }
    }, new AsyncFromSyncIterator(s);
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) {
            symbols = symbols.filter(function(sym) {
                return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
        }
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _object_spread_props(target, source) {
    source = source != null ? source : {};
    if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
        ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _default(pathString) {
    return _ref.apply(this, arguments);
}
function _ref() {
    _ref = _async_to_generator(function*(pathString) {
        let yamlDatasources = yield (0, _yamlLoader.default)(pathString, false);
        const prismaDatasources = yield loadPrismaDsFileNames(pathString);
        const datasourcesConfigs = _object_spread({}, yamlDatasources, prismaDatasources);
        if (datasourcesConfigs && !Object.keys(datasourcesConfigs).length) {
            throw new Error(`There are no datasources defined in datasource dir: ${pathString}`);
        }
        const datasources = {};
        {
            var _iteratorAbruptCompletion = false, _didIteratorError = false, _iteratorError;
            try {
                for(var _iterator = _async_iterator(Object.keys(datasourcesConfigs)), _step; _iteratorAbruptCompletion = !(_step = yield _iterator.next()).done; _iteratorAbruptCompletion = false){
                    let _value = _step.value;
                    const dsName = _value;
                    _logger.logger.debug('evaluating datasource %s', dsName);
                    datasourcesConfigs[dsName] = (0, _expandVariables.default)(datasourcesConfigs[dsName]);
                    _logger.logger.debug('evaluated datasource %s %o', dsName, datasourcesConfigs[dsName]);
                    // let's load the loadFn and executeFn
                    // there is an assumption that for each datasource, the type's .ts file should be inside /datasources/types folder
                    const fileName = datasourcesConfigs[dsName].type;
                    yield Promise.resolve(_path.default.join(pathString, 'types', `${fileName}`)).then((p)=>/*#__PURE__*/ _interop_require_wildcard(require(p))).then(function() {
                        var _ref = _async_to_generator(function*(Module) {
                            const dsYamlConfig = datasourcesConfigs[dsName];
                            // @ts-ignore
                            const Constructor = Module.default;
                            const dsInstance = new Constructor(_object_spread_props(_object_spread({}, dsYamlConfig), {
                                name: dsName
                            }));
                            yield dsInstance.init(); // This should initialize and set the client in dsInstance
                            if (!dsInstance.client) {
                                throw new Error(`Client could not be initialized in your datasource ${dsName}`);
                            }
                            datasources[dsName] = dsInstance;
                        });
                        return function(Module) {
                            return _ref.apply(this, arguments);
                        };
                    }());
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally{
                try {
                    if (_iteratorAbruptCompletion && _iterator.return != null) {
                        yield _iterator.return();
                    }
                } finally{
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
        return datasources;
    });
    return _ref.apply(this, arguments);
}
function loadPrismaDsFileNames(pathString) {
    return _loadPrismaDsFileNames.apply(this, arguments);
}
function _loadPrismaDsFileNames() {
    _loadPrismaDsFileNames = _async_to_generator(function*(pathString) {
        let basePath = _path.default.basename(pathString);
        let prismaSchemas = {};
        const files = _glob.glob.sync(_path.default.join(pathString, '**', '*.?(prisma)').replace(/\\/g, '/'));
        files.forEach((file)=>{
            const id = file.replace(new RegExp(`.*?\/${basePath}\/`), '').replace(/\//g, '.').replace(/\.(prisma)/i, '').replace(/\.index$/, '');
            prismaSchemas = _object_spread({}, prismaSchemas, {
                [id]: {
                    type: 'prisma',
                    name: id
                }
            });
        });
        return prismaSchemas;
    });
    return _loadPrismaDsFileNames.apply(this, arguments);
}
