/*
 * You are allowed to study this software for learning and local * development purposes only. Any other use without explicit permission by Mindgrep, is prohibited.
 * Â© 2022 Mindgrep Technologies Pvt Ltd
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return loadModules;
    }
});
const _glob = /*#__PURE__*/ _interop_require_default(require("glob"));
const _path = /*#__PURE__*/ _interop_require_default(require("path"));
const _logger = require("../logger");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _async_to_generator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
function _object_spread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === "function") {
            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
                return Object.getOwnPropertyDescriptor(source, sym).enumerable;
            }));
        }
        ownKeys.forEach(function(key) {
            _define_property(target, key, source[key]);
        });
    }
    return target;
}
function loadModules(pathString, global = false) {
    let api = {};
    _logger.logger.info('Loading %s from %s', _path.default.basename(pathString), pathString);
    return new Promise((resolve, reject)=>{
        (0, _glob.default)(_path.default.join(pathString, '**', '*.?(js)').replace(/\\/g, '/'), function(err, res) {
            _logger.logger.debug('processing files: %s', res);
            if (err) {
                reject(err);
            } else {
                Promise.all(res.map((file)=>{
                    return Promise.resolve(_path.default.relative(__dirname, file).replace(/\.(js)/, '')).then((p)=>/*#__PURE__*/ _interop_require_wildcard(require(p))).then((module1)=>{
                        if (file.match(/.*?\/plugins\//)) {
                            const id = file.replace(/.*?\/(plugins)\//, '').replace(/\//g, '_').replace(/\.(js)/i, '').replace(/\_index$/, '');
                            // Load plugins at global level to provide backward compatibilty
                            api = _object_spread({}, api, module1);
                            // Load plugins with namespace using underscore notation
                            if (id == 'index') {
                                api = _object_spread({}, api, module1);
                            } else {
                                for(let f in module1){
                                    if (f == 'default') {
                                        api[id] = module1[f];
                                    } else {
                                        api[id + '_' + f] = module1[f];
                                    }
                                }
                            }
                        } else {
                            const id = file.replace(/.*?\/functions\//, '').replace(/\//g, '.').replace(/\.(js)/i, '').replace(/\.index$/, '');
                            if (global) {
                                api = _object_spread({}, api, module1);
                            } else {
                                if (id == 'index') {
                                    api = _object_spread({}, api, module1);
                                } else {
                                    for(let f in module1){
                                        if (f == 'default') {
                                            api[id] = module1[f];
                                        } else {
                                            api[id + '.' + f] = module1[f];
                                        }
                                    }
                                }
                            }
                        }
                    });
                })).then(()=>{
                    resolve(api);
                });
            }
        });
    });
}
if (require.main === module) {
    _async_to_generator(function*() {
        try {
            yield loadModules('../plugins').then(console.log);
        } catch (ex) {
            _logger.logger.error('Caught exception: %o', ex.stack);
        }
    })();
}
